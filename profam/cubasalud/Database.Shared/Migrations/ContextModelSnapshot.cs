// <auto-generated />
using System;
using Database.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Database.Shared.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Database.Shared.Models.Banco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bancos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "BANCO AGROMERCANTIL DE GUATEMALA S.A."
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "VIVIBANCO S.A."
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "BANCO G&T CONTINENTAL S.A."
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "BANCO DE AMERICA CENTRAL S.A."
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "BANCO FICOHSA GUATEMALA S.A."
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "BANCO INTERNACIONAL S.A."
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "BANCO DE DESARROLLO RURAL S.A."
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "BANCO INDUSTRIAL S.A."
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "BANCO DE CREDITO S.A."
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "BANCO PROMERICA S.A."
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "CITIBANK N.A SUCURSAL GUATEMALA"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "EL CREDITO HIPOTECARIO NACIONAL DE GUATEMALA"
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "BANCO DE LOS TRABAJADORES"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "BANCO INMOBILIARIO S.A."
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.Caja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<bool>("EstadoCaja")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MontoApertura")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ResponsableAperturaId")
                        .HasColumnType("text");

                    b.Property<string>("ResponsableCierreId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResponsableAperturaId");

                    b.HasIndex("ResponsableCierreId");

                    b.ToTable("Cajas");
                });

            modelBuilder.Entity("Database.Shared.Models.CajaClinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("EstadoCaja")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MontoApertura")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("CajaClinicas");
                });

            modelBuilder.Entity("Database.Shared.Models.CajaLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<bool>("EstadoCaja")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MontoApertura")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ResponsableAperturaLabId")
                        .HasColumnType("text");

                    b.Property<string>("ResponsableCierreLabId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ResponsableAperturaLabId");

                    b.HasIndex("ResponsableCierreLabId");

                    b.ToTable("CajaLab");
                });

            modelBuilder.Entity("Database.Shared.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Database.Shared.Models.CategoriaGasto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoriasGastos");
                });

            modelBuilder.Entity("Database.Shared.Models.CategoriaLabClinico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UltimoUsuarioModificado")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoriaLabClinicos");
                });

            modelBuilder.Entity("Database.Shared.Models.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("Edad")
                        .HasColumnType("integer");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsMenorDeEdad")
                        .HasColumnType("boolean");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("integer");

                    b.Property<string>("EstadoCita")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("boolean");

                    b.Property<string>("Motivo")
                        .HasColumnType("text");

                    b.Property<string>("NombreEncargado")
                        .HasColumnType("text");

                    b.Property<string>("NombreMedicoTemporal")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UserId1");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Database.Shared.Models.Citas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("Edad")
                        .HasColumnType("integer");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<bool>("EsMenorDeEdad")
                        .HasColumnType("boolean");

                    b.Property<int?>("EspecialidadId")
                        .HasColumnType("integer");

                    b.Property<string>("EstadoCita")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaFinal")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Finalizada")
                        .HasColumnType("boolean");

                    b.Property<string>("Motivo")
                        .HasColumnType("text");

                    b.Property<string>("NombreEncargado")
                        .HasColumnType("text");

                    b.Property<string>("NombreMedicoTemporal")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("UserId1");

                    b.ToTable("Citass");
                });

            modelBuilder.Entity("Database.Shared.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Celular")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Database.Shared.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaLimite")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaRecepcion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NoComprobante")
                        .HasColumnType("text");

                    b.Property<string>("NombreVendedor")
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCompraId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoCompraId");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Database.Shared.Models.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Archivado")
                        .HasColumnType("boolean");

                    b.Property<int?>("CitasId")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostoConsulta")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("EstadoPagoConsultaId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExamenFisicoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaYHoraInicioConsulta")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("HistoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("ObservacionesAdicionales")
                        .HasColumnType("text");

                    b.Property<int?>("PrescripcionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CitasId");

                    b.HasIndex("EstadoPagoConsultaId");

                    b.HasIndex("ExamenFisicoId");

                    b.HasIndex("HistoriaId");

                    b.HasIndex("PrescripcionId");

                    b.ToTable("Consultas");
                });

            modelBuilder.Entity("Database.Shared.Models.Cotizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Confirmado")
                        .HasColumnType("boolean");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EnvioId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaCotizacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("FechaValida")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<string>("TipoVenta")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cotizaciones");
                });

            modelBuilder.Entity("Database.Shared.Models.DatosExamenesLabClinico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Campos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int>("ExamenLabClinicoId")
                        .HasColumnType("integer");

                    b.Property<string>("Indicaciones")
                        .HasColumnType("text");

                    b.Property<string>("Resultado")
                        .HasColumnType("text");

                    b.Property<string>("ValorReferencia")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExamenLabClinicoId");

                    b.ToTable("DatosExamenesLabClinicos");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CajaId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompraId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Gasto")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Ingreso")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("VentaId")
                        .HasColumnType("integer");

                    b.Property<int?>("VentaServicioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CajaId");

                    b.HasIndex("CompraId");

                    b.HasIndex("VentaId");

                    b.HasIndex("VentaServicioId");

                    b.ToTable("DetalleCaja");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCajaClinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CajaClinicaId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompraId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Gasto")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Ingreso")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("VentaId")
                        .HasColumnType("integer");

                    b.Property<int?>("VentaServicioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CajaClinicaId");

                    b.HasIndex("CompraId");

                    b.HasIndex("VentaId");

                    b.HasIndex("VentaServicioId");

                    b.ToTable("DetalleCajaClinicas");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCajaLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CajaLabId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Gasto")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Ingreso")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("VentasLabId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CajaLabId");

                    b.HasIndex("VentasLabId");

                    b.ToTable("DetalleCajaLab");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("BaseImponible")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("CompraId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Impuesto")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("PrecioTotal")
                        .HasColumnType("numeric(18,3)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleCompras");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCotizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("CotizacionId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CotizacionId");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ServicioId");

                    b.ToTable("DetalleCotizaciones");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleEnvio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("EnvioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EnvioId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetalleEnvios");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleExamen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric");

                    b.Property<int?>("ExamenId")
                        .HasColumnType("integer");

                    b.Property<int>("ExamenLabClinicoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric");

                    b.Property<string>("Resultado")
                        .HasColumnType("text");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ExamenId");

                    b.HasIndex("ExamenLabClinicoId");

                    b.ToTable("DetalleExamenes");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("ServicioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("VentaServicioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("VentaServicioId");

                    b.ToTable("DetalleServicios");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleTrasladoProductos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("TrasladosProductosId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("TrasladosProductosId");

                    b.ToTable("DetalleTraslado");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BienOServicio")
                        .HasColumnType("text");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<decimal>("Descuento")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServicioId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("VentaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("ServicioId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetalleVentas");
                });

            modelBuilder.Entity("Database.Shared.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Dpi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Edad")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("text");

                    b.Property<string>("Imagen")
                        .HasColumnType("text");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Salario")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono_2")
                        .HasColumnType("text");

                    b.Property<string>("Telefono_3")
                        .HasColumnType("text");

                    b.Property<string>("TipoContrato")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("Database.Shared.Models.Envio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<string>("DireccionExacta")
                        .HasColumnType("text");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<int>("EstadosEnvioId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("NoComprobante")
                        .HasColumnType("text");

                    b.Property<string>("NombrePiloto")
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<int>("RutaId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.Property<string>("UserId2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EstadosEnvioId");

                    b.HasIndex("RutaId");

                    b.HasIndex("UserId2");

                    b.ToTable("Envios");
                });

            modelBuilder.Entity("Database.Shared.Models.Especialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("NombreEspecialidad")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Especialidad");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreEspecialidad = "Medicina general"
                        },
                        new
                        {
                            Id = 2,
                            NombreEspecialidad = "Medicina estética"
                        },
                        new
                        {
                            Id = 3,
                            NombreEspecialidad = "Ginecología y Obstetricia"
                        },
                        new
                        {
                            Id = 4,
                            NombreEspecialidad = "Pediatría"
                        },
                        new
                        {
                            Id = 5,
                            NombreEspecialidad = "Cirugía"
                        },
                        new
                        {
                            Id = 6,
                            NombreEspecialidad = "Traumatología"
                        },
                        new
                        {
                            Id = 7,
                            NombreEspecialidad = "Medicina interna"
                        },
                        new
                        {
                            Id = 8,
                            NombreEspecialidad = "Laboratorio clínico"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoExamen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadoExamenes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Solicitados"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = " En proceso"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = " Cancelados"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = " Revisión"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = " Finalizados"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoPagoConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadoPagoConsultas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "Pagado"
                        },
                        new
                        {
                            Id = 2,
                            Estado = "Pendiente"
                        },
                        new
                        {
                            Id = 3,
                            Estado = "Cortesía"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoRecepcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadoRecepciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Estado = "No ingresado"
                        },
                        new
                        {
                            Id = 2,
                            Estado = "Ingresado"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoTraslados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DescripcionEstado")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadoTraslados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "Aceptado"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Denegado"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Con problema"
                        },
                        new
                        {
                            Id = 4,
                            DescripcionEstado = "Faltantes"
                        },
                        new
                        {
                            Id = 5,
                            DescripcionEstado = "En tránsito"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.EstadosEnvio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EstadosEnvio");
                });

            modelBuilder.Entity("Database.Shared.Models.Examen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClinicaReferida")
                        .HasColumnType("text");

                    b.Property<string>("DoctorReferido")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<int?>("EstadoExamenId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaRealizacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<bool>("TipoA")
                        .HasColumnType("boolean");

                    b.Property<bool>("TipoB")
                        .HasColumnType("boolean");

                    b.Property<bool>("TipoC")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoExamenId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Examenes");
                });

            modelBuilder.Entity("Database.Shared.Models.ExamenFisico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("FrecuenciaCardiaca")
                        .HasColumnType("text");

                    b.Property<string>("FrecuenciaRespiratoria")
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("PresionArterialBrazoDerecho")
                        .HasColumnType("text");

                    b.Property<string>("PresionArterialBrazoIzquierdo")
                        .HasColumnType("text");

                    b.Property<string>("SaturacionDeOxigeno")
                        .HasColumnType("text");

                    b.Property<string>("Temperatura")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExamenFisico");
                });

            modelBuilder.Entity("Database.Shared.Models.ExamenLabClinico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoriaLabClinicoId")
                        .HasColumnType("integer");

                    b.Property<string>("CodigoInterno")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Indicaciones")
                        .HasColumnType("text");

                    b.Property<string>("NombreExamen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecioB")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecioC")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PrecioCosto")
                        .HasColumnType("numeric");

                    b.Property<string>("TipoDeExamen")
                        .HasColumnType("text");

                    b.Property<string>("UltimaModificacion")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaLabClinicoId");

                    b.ToTable("ExamenLabClinicos");
                });

            modelBuilder.Entity("Database.Shared.Models.FormaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("NombreFormaPago")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormaPagos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NombreFormaPago = "Efectivo"
                        },
                        new
                        {
                            Id = 2,
                            NombreFormaPago = "Tarjeta de Débito"
                        },
                        new
                        {
                            Id = 3,
                            NombreFormaPago = "Tarjeta de Crédito"
                        },
                        new
                        {
                            Id = 4,
                            NombreFormaPago = "Cheques"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.Gasto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CategoriaGastoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Costo")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NombreGasto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaGastoId");

                    b.ToTable("Gastos");
                });

            modelBuilder.Entity("Database.Shared.Models.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreGrupo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("Database.Shared.Models.GrupoTProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreGrupoT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GrupoTProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.Historia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Diagnostico")
                        .HasColumnType("text");

                    b.Property<string>("HistoriaProblema")
                        .HasColumnType("text");

                    b.Property<string>("Sintomas")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Historia");
                });

            modelBuilder.Entity("Database.Shared.Models.LaboratorioProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreLaboratorioProducto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LaboratorioProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreMarca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("Database.Shared.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SexoId")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<bool>("esta_Afiliado")
                        .HasColumnType("boolean");

                    b.Property<string>("no_IGGS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Database.Shared.Models.Pagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("FormaPagoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Monto")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("VentaId")
                        .HasColumnType("integer");

                    b.Property<int?>("VentaLabId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagoId");

                    b.HasIndex("VentaId");

                    b.HasIndex("VentaLabId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Database.Shared.Models.Prescripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<string>("Indicaciones")
                        .HasColumnType("text");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.ToTable("Prescripciones");
                });

            modelBuilder.Entity("Database.Shared.Models.PresentacionProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("PresentProducto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PresentacionProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ActivoYConcentracion")
                        .HasColumnType("text");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("CodigoReferencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Dosis")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GrupoId")
                        .HasColumnType("integer");

                    b.Property<int?>("GrupoTProductoId")
                        .HasColumnType("integer");

                    b.Property<string>("Imagen")
                        .HasColumnType("text");

                    b.Property<int?>("LaboratorioProductoId")
                        .HasColumnType("integer");

                    b.Property<int?>("MarcaId")
                        .HasColumnType("integer");

                    b.Property<string>("NombreProducto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("PrecioCosto")
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("Precio_2")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio_3")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio_4")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio_5")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio_6")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Precio_7")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("PresentacionProductoId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("StockInical")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoBodegaId")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoProductoId")
                        .HasColumnType("integer");

                    b.Property<int?>("ViadminId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("GrupoTProductoId");

                    b.HasIndex("LaboratorioProductoId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("PresentacionProductoId");

                    b.HasIndex("TipoBodegaId");

                    b.HasIndex("TipoProductoId");

                    b.HasIndex("ViadminId");

                    b.HasIndex("NombreProducto", "TipoBodegaId", "Eliminado")
                        .IsUnique();

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("BancoId")
                        .HasColumnType("integer");

                    b.Property<string>("Celular_1")
                        .HasColumnType("text");

                    b.Property<string>("Celular_2")
                        .HasColumnType("text");

                    b.Property<string>("Correo")
                        .HasColumnType("text");

                    b.Property<string>("CuentaBancaria")
                        .HasColumnType("text");

                    b.Property<string>("DiasEntrega")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("FrecuenciaEntrega")
                        .HasColumnType("text");

                    b.Property<string>("Giro")
                        .HasColumnType("text");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<string>("Telefono_1")
                        .HasColumnType("text");

                    b.Property<string>("Telefono_2")
                        .HasColumnType("text");

                    b.Property<string>("TipoProveedor")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BancoId");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("Database.Shared.Models.Recepcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CompraId")
                        .HasColumnType("integer");

                    b.Property<int>("EstadoRecepcionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("EstadoRecepcionId");

                    b.ToTable("Recepciones");
                });

            modelBuilder.Entity("Database.Shared.Models.Ruta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Destino")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Rutas");
                });

            modelBuilder.Entity("Database.Shared.Models.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreServicio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Database.Shared.Models.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DescripcionSexo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sexo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionSexo = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionSexo = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionSexo = "Otro"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.TipoBodega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("DescripcionBodega")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoBodega");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionBodega = "FARMACIA"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionBodega = "CLINICA"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionBodega = "BODEGA"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.TipoCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Tipo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoCompra");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Tipo = "CONTADO"
                        },
                        new
                        {
                            Id = 2,
                            Tipo = "CREDITO"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.TipoEspecialidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("NombreEspecialidad")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoEspecialidad");
                });

            modelBuilder.Entity("Database.Shared.Models.TipoProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreTipoProducto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TipoProductos");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Eliminado = false,
                            NombreTipoProducto = "Medicamentos"
                        },
                        new
                        {
                            Id = 11,
                            Eliminado = false,
                            NombreTipoProducto = "Insumos Médicos"
                        },
                        new
                        {
                            Id = 12,
                            Eliminado = false,
                            NombreTipoProducto = "Equipos Médicos"
                        },
                        new
                        {
                            Id = 13,
                            Eliminado = false,
                            NombreTipoProducto = "Muestras Médicas"
                        });
                });

            modelBuilder.Entity("Database.Shared.Models.TrasladosProductos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int>("EstadoTrasladosId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaTraslado")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.Property<bool>("ProductosRegresadosAFarmacia")
                        .HasColumnType("boolean");

                    b.Property<string>("ResponsableEnviadoId")
                        .HasColumnType("text");

                    b.Property<string>("ResponsableRecibidoId")
                        .HasColumnType("text");

                    b.Property<string>("TipoTrasladoBodega")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EstadoTrasladosId");

                    b.HasIndex("ResponsableEnviadoId");

                    b.HasIndex("ResponsableRecibidoId");

                    b.ToTable("TrasladosProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("ClientesId")
                        .HasColumnType("integer");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<int?>("EnvioId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MontoPago")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("NoComprobante")
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<string>("TipoVenta")
                        .HasColumnType("text");

                    b.Property<decimal>("Vuelto")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientesId");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EnvioId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Database.Shared.Models.VentaServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormaPago")
                        .HasColumnType("text");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("NoComprobante")
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("VentaServicios");
                });

            modelBuilder.Entity("Database.Shared.Models.VentasLab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("EmpleadoResponsable")
                        .HasColumnType("text");

                    b.Property<int?>("ExamenId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FormaPago")
                        .HasColumnType("text");

                    b.Property<decimal>("MontoPagado")
                        .HasColumnType("numeric");

                    b.Property<string>("Nit")
                        .HasColumnType("text");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Vuelto")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ExamenId");

                    b.ToTable("VentasLabs");
                });

            modelBuilder.Entity("Database.Shared.Models.ViaAdministracions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreViaAdministracion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ViaAdministracion");
                });

            modelBuilder.Entity("Database.Shared.Models.Viadmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("NombreViadmin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Viadmin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "d2716b4b-671d-4814-a04c-b51aa97051e8",
                            ConcurrencyStamp = "e4f021a4-0b16-432f-9aa4-a179b187be97",
                            Name = "Vendedor",
                            NormalizedName = "VENDEDOR"
                        },
                        new
                        {
                            Id = "785c160e-6a4f-4fd8-8121-4e6b2af230cd",
                            ConcurrencyStamp = "15b3709a-8db4-4542-bcc3-35d8d3ad9bb8",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "ec320394-8501-4710-a2ae-85e04315a5f9",
                            ConcurrencyStamp = "38b780c7-35c4-45bb-a076-950678c85d3b",
                            Name = "Cajero",
                            NormalizedName = "CAJERO"
                        },
                        new
                        {
                            Id = "4e725ea5-282e-401c-9e82-da4947e382ef",
                            ConcurrencyStamp = "81b597e4-60f4-4998-96ad-7e64c2bf7c70",
                            Name = "Mensajero",
                            NormalizedName = "MENSAJERO"
                        },
                        new
                        {
                            Id = "3c06eaf3-10d4-40ae-bd00-3d50d629cfde",
                            ConcurrencyStamp = "40481d19-a1c4-4d1b-981f-66308a108405",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Database.Shared.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("EmpleadoId")
                        .HasColumnType("integer");

                    b.HasIndex("EmpleadoId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Database.Shared.Models.Caja", b =>
                {
                    b.HasOne("Database.Shared.Models.User", "ResponsableApertura")
                        .WithMany("ResponsableApertura")
                        .HasForeignKey("ResponsableAperturaId");

                    b.HasOne("Database.Shared.Models.User", "ResponsableCierre")
                        .WithMany("ResponsableCierre")
                        .HasForeignKey("ResponsableCierreId");

                    b.Navigation("ResponsableApertura");

                    b.Navigation("ResponsableCierre");
                });

            modelBuilder.Entity("Database.Shared.Models.CajaLab", b =>
                {
                    b.HasOne("Database.Shared.Models.User", "ResponsableAperturaLab")
                        .WithMany("ResponsableAperturaLab")
                        .HasForeignKey("ResponsableAperturaLabId");

                    b.HasOne("Database.Shared.Models.User", "ResponsableCierreLab")
                        .WithMany("ResponsableCierreLab")
                        .HasForeignKey("ResponsableCierreLabId");

                    b.Navigation("ResponsableAperturaLab");

                    b.Navigation("ResponsableCierreLab");
                });

            modelBuilder.Entity("Database.Shared.Models.Cita", b =>
                {
                    b.HasOne("Database.Shared.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("Database.Shared.Models.Especialidad", "Especialidad")
                        .WithMany()
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("Database.Shared.Models.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId");

                    b.HasOne("Database.Shared.Models.Servicio", "Servicio")
                        .WithMany()
                        .HasForeignKey("ServicioId");

                    b.HasOne("Database.Shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Empleado");

                    b.Navigation("Especialidad");

                    b.Navigation("Paciente");

                    b.Navigation("Servicio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Shared.Models.Citas", b =>
                {
                    b.HasOne("Database.Shared.Models.Empleado", "Empleado")
                        .WithMany("Citas")
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("Database.Shared.Models.Especialidad", "Especialidad")
                        .WithMany("Citas")
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("Database.Shared.Models.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId");

                    b.HasOne("Database.Shared.Models.Servicio", "Servicio")
                        .WithMany("Citas")
                        .HasForeignKey("ServicioId");

                    b.HasOne("Database.Shared.Models.User", "User")
                        .WithMany("Citas")
                        .HasForeignKey("UserId1");

                    b.Navigation("Empleado");

                    b.Navigation("Especialidad");

                    b.Navigation("Paciente");

                    b.Navigation("Servicio");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Shared.Models.Compra", b =>
                {
                    b.HasOne("Database.Shared.Models.Empleado", "Empleado")
                        .WithMany("Compras")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.TipoCompra", "TipoCompra")
                        .WithMany("Compras")
                        .HasForeignKey("TipoCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Proveedor");

                    b.Navigation("TipoCompra");
                });

            modelBuilder.Entity("Database.Shared.Models.Consulta", b =>
                {
                    b.HasOne("Database.Shared.Models.Citas", "Citas")
                        .WithMany("Consultas")
                        .HasForeignKey("CitasId");

                    b.HasOne("Database.Shared.Models.EstadoPagoConsulta", "EstadoPagoConsulta")
                        .WithMany("Consultas")
                        .HasForeignKey("EstadoPagoConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.ExamenFisico", "ExamenFisico")
                        .WithMany("Consultas")
                        .HasForeignKey("ExamenFisicoId");

                    b.HasOne("Database.Shared.Models.Historia", "Historia")
                        .WithMany("Consultas")
                        .HasForeignKey("HistoriaId");

                    b.HasOne("Database.Shared.Models.Prescripcion", "Prescripcion")
                        .WithMany("Consultas")
                        .HasForeignKey("PrescripcionId");

                    b.Navigation("Citas");

                    b.Navigation("EstadoPagoConsulta");

                    b.Navigation("ExamenFisico");

                    b.Navigation("Historia");

                    b.Navigation("Prescripcion");
                });

            modelBuilder.Entity("Database.Shared.Models.DatosExamenesLabClinico", b =>
                {
                    b.HasOne("Database.Shared.Models.ExamenLabClinico", "ExamenLabClinico")
                        .WithMany("DatosExamenesLabClinicos")
                        .HasForeignKey("ExamenLabClinicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamenLabClinico");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCaja", b =>
                {
                    b.HasOne("Database.Shared.Models.Caja", "Caja")
                        .WithMany("DetalleCajas")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Compra", "Compra")
                        .WithMany()
                        .HasForeignKey("CompraId");

                    b.HasOne("Database.Shared.Models.Venta", "Venta")
                        .WithMany("DetalleCajas")
                        .HasForeignKey("VentaId");

                    b.HasOne("Database.Shared.Models.VentaServicio", "VentaServicio")
                        .WithMany()
                        .HasForeignKey("VentaServicioId");

                    b.Navigation("Caja");

                    b.Navigation("Compra");

                    b.Navigation("Venta");

                    b.Navigation("VentaServicio");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCajaClinica", b =>
                {
                    b.HasOne("Database.Shared.Models.CajaClinica", "CajaClinica")
                        .WithMany("DetalleCajaClinicas")
                        .HasForeignKey("CajaClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Compra", "Compra")
                        .WithMany()
                        .HasForeignKey("CompraId");

                    b.HasOne("Database.Shared.Models.Venta", "Venta")
                        .WithMany("DetalleCajaClinicas")
                        .HasForeignKey("VentaId");

                    b.HasOne("Database.Shared.Models.VentaServicio", "VentaServicio")
                        .WithMany()
                        .HasForeignKey("VentaServicioId");

                    b.Navigation("CajaClinica");

                    b.Navigation("Compra");

                    b.Navigation("Venta");

                    b.Navigation("VentaServicio");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCajaLab", b =>
                {
                    b.HasOne("Database.Shared.Models.CajaLab", "CajaLab")
                        .WithMany("DetalleCajaLabs")
                        .HasForeignKey("CajaLabId");

                    b.HasOne("Database.Shared.Models.VentasLab", "VentasLab")
                        .WithMany("DetalleCajaLabs")
                        .HasForeignKey("VentasLabId");

                    b.Navigation("CajaLab");

                    b.Navigation("VentasLab");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCompra", b =>
                {
                    b.HasOne("Database.Shared.Models.Compra", "Compra")
                        .WithMany("DetalleCompras")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleCotizacion", b =>
                {
                    b.HasOne("Database.Shared.Models.Cotizacion", "Cotizacion")
                        .WithMany("DetalleCotizacion")
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Producto", "Producto")
                        .WithMany("DetalleCotizaciones")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Database.Shared.Models.Servicio", "Servicio")
                        .WithMany("DetalleCotizaciones")
                        .HasForeignKey("ServicioId");

                    b.Navigation("Cotizacion");

                    b.Navigation("Producto");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleEnvio", b =>
                {
                    b.HasOne("Database.Shared.Models.Envio", "Envio")
                        .WithMany("DetalleEnvios")
                        .HasForeignKey("EnvioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Producto", "Producto")
                        .WithMany("DetalleEnvios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Envio");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleExamen", b =>
                {
                    b.HasOne("Database.Shared.Models.Examen", "Examen")
                        .WithMany("DetalleExamenes")
                        .HasForeignKey("ExamenId");

                    b.HasOne("Database.Shared.Models.ExamenLabClinico", "ExamenLabClinico")
                        .WithMany("DetalleExamens")
                        .HasForeignKey("ExamenLabClinicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examen");

                    b.Navigation("ExamenLabClinico");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleServicio", b =>
                {
                    b.HasOne("Database.Shared.Models.Servicio", "Servicio")
                        .WithMany("DetalleServicio")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.VentaServicio", "VentaServicio")
                        .WithMany("DetalleServicio")
                        .HasForeignKey("VentaServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Servicio");

                    b.Navigation("VentaServicio");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleTrasladoProductos", b =>
                {
                    b.HasOne("Database.Shared.Models.Producto", "Producto")
                        .WithMany("DetalleTrasladoProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.TrasladosProductos", "TrasladosProductos")
                        .WithMany("DetalleTrasladoProductos")
                        .HasForeignKey("TrasladosProductosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("TrasladosProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.DetalleVenta", b =>
                {
                    b.HasOne("Database.Shared.Models.Producto", "Producto")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("ProductoId");

                    b.HasOne("Database.Shared.Models.Servicio", "Servicio")
                        .WithMany("DetalleVentas")
                        .HasForeignKey("ServicioId");

                    b.HasOne("Database.Shared.Models.Venta", "Venta")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Servicio");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Database.Shared.Models.Envio", b =>
                {
                    b.HasOne("Database.Shared.Models.EstadosEnvio", "EstadosEnvio")
                        .WithMany("Envios")
                        .HasForeignKey("EstadosEnvioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Ruta", "Ruta")
                        .WithMany("Envios")
                        .HasForeignKey("RutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.User", "User")
                        .WithMany("Envios")
                        .HasForeignKey("UserId2");

                    b.Navigation("EstadosEnvio");

                    b.Navigation("Ruta");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Shared.Models.Examen", b =>
                {
                    b.HasOne("Database.Shared.Models.Empleado", null)
                        .WithMany("Examens")
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("Database.Shared.Models.EstadoExamen", "EstadoExamen")
                        .WithMany("Examenes")
                        .HasForeignKey("EstadoExamenId");

                    b.HasOne("Database.Shared.Models.Paciente", "Paciente")
                        .WithMany("Examens")
                        .HasForeignKey("PacienteId");

                    b.Navigation("EstadoExamen");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Database.Shared.Models.ExamenLabClinico", b =>
                {
                    b.HasOne("Database.Shared.Models.CategoriaLabClinico", "CategoriaLabClinico")
                        .WithMany("ExamenLabClinicos")
                        .HasForeignKey("CategoriaLabClinicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaLabClinico");
                });

            modelBuilder.Entity("Database.Shared.Models.Gasto", b =>
                {
                    b.HasOne("Database.Shared.Models.CategoriaGasto", "CategoriaGasto")
                        .WithMany("Gastos")
                        .HasForeignKey("CategoriaGastoId");

                    b.Navigation("CategoriaGasto");
                });

            modelBuilder.Entity("Database.Shared.Models.Paciente", b =>
                {
                    b.HasOne("Database.Shared.Models.Sexo", "Sexo")
                        .WithMany("Clientes")
                        .HasForeignKey("SexoId");

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("Database.Shared.Models.Pagos", b =>
                {
                    b.HasOne("Database.Shared.Models.FormaPago", "FormaPago")
                        .WithMany("Pagos")
                        .HasForeignKey("FormaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Venta", "Venta")
                        .WithMany("Pagos")
                        .HasForeignKey("VentaId");

                    b.HasOne("Database.Shared.Models.VentasLab", "VentaLab")
                        .WithMany("Pagos")
                        .HasForeignKey("VentaLabId");

                    b.Navigation("FormaPago");

                    b.Navigation("Venta");

                    b.Navigation("VentaLab");
                });

            modelBuilder.Entity("Database.Shared.Models.Prescripcion", b =>
                {
                    b.HasOne("Database.Shared.Models.Producto", "Producto")
                        .WithMany("Prescripciones")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Database.Shared.Models.Producto", b =>
                {
                    b.HasOne("Database.Shared.Models.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Database.Shared.Models.Grupo", "Grupo")
                        .WithMany("Productos")
                        .HasForeignKey("GrupoId");

                    b.HasOne("Database.Shared.Models.GrupoTProducto", "GrupoTProducto")
                        .WithMany("Productos")
                        .HasForeignKey("GrupoTProductoId");

                    b.HasOne("Database.Shared.Models.LaboratorioProducto", "LaboratorioProducto")
                        .WithMany("Productos")
                        .HasForeignKey("LaboratorioProductoId");

                    b.HasOne("Database.Shared.Models.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaId");

                    b.HasOne("Database.Shared.Models.PresentacionProducto", "PresentacionProducto")
                        .WithMany("Productos")
                        .HasForeignKey("PresentacionProductoId");

                    b.HasOne("Database.Shared.Models.TipoBodega", "TipoBodega")
                        .WithMany("Productos")
                        .HasForeignKey("TipoBodegaId");

                    b.HasOne("Database.Shared.Models.TipoProducto", "TipoProducto")
                        .WithMany("Productos")
                        .HasForeignKey("TipoProductoId");

                    b.HasOne("Database.Shared.Models.Viadmin", "Viadmin")
                        .WithMany("Productos")
                        .HasForeignKey("ViadminId");

                    b.Navigation("Categoria");

                    b.Navigation("Grupo");

                    b.Navigation("GrupoTProducto");

                    b.Navigation("LaboratorioProducto");

                    b.Navigation("Marca");

                    b.Navigation("PresentacionProducto");

                    b.Navigation("TipoBodega");

                    b.Navigation("TipoProducto");

                    b.Navigation("Viadmin");
                });

            modelBuilder.Entity("Database.Shared.Models.Proveedor", b =>
                {
                    b.HasOne("Database.Shared.Models.Banco", "Banco")
                        .WithMany("Proveedores")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banco");
                });

            modelBuilder.Entity("Database.Shared.Models.Recepcion", b =>
                {
                    b.HasOne("Database.Shared.Models.Compra", "Compra")
                        .WithMany("Recepciones")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.EstadoRecepcion", "EstadoRecepcion")
                        .WithMany("Recepciones")
                        .HasForeignKey("EstadoRecepcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("EstadoRecepcion");
                });

            modelBuilder.Entity("Database.Shared.Models.TrasladosProductos", b =>
                {
                    b.HasOne("Database.Shared.Models.EstadoTraslados", "EstadoTraslados")
                        .WithMany("TrasladosProductos")
                        .HasForeignKey("EstadoTrasladosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.User", "ResponsableEnviado")
                        .WithMany("ResponsableEnviados")
                        .HasForeignKey("ResponsableEnviadoId");

                    b.HasOne("Database.Shared.Models.User", "ResponsableRecibido")
                        .WithMany("ResponsableRecibidos")
                        .HasForeignKey("ResponsableRecibidoId");

                    b.Navigation("EstadoTraslados");

                    b.Navigation("ResponsableEnviado");

                    b.Navigation("ResponsableRecibido");
                });

            modelBuilder.Entity("Database.Shared.Models.Venta", b =>
                {
                    b.HasOne("Database.Shared.Models.Clientes", "Clientes")
                        .WithMany("Ventas")
                        .HasForeignKey("ClientesId");

                    b.HasOne("Database.Shared.Models.Empleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Envio", "Envio")
                        .WithMany("Ventas")
                        .HasForeignKey("EnvioId");

                    b.HasOne("Database.Shared.Models.Paciente", "Paciente")
                        .WithMany("Venta")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Clientes");

                    b.Navigation("Empleado");

                    b.Navigation("Envio");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Database.Shared.Models.VentaServicio", b =>
                {
                    b.HasOne("Database.Shared.Models.Empleado", "Empleado")
                        .WithMany("VentasServicios")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Shared.Models.Paciente", "Paciente")
                        .WithMany("VentaServicio")
                        .HasForeignKey("PacienteId");

                    b.Navigation("Empleado");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Database.Shared.Models.VentasLab", b =>
                {
                    b.HasOne("Database.Shared.Models.Examen", "Examen")
                        .WithMany("VentasLabs")
                        .HasForeignKey("ExamenId");

                    b.Navigation("Examen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Shared.Models.User", b =>
                {
                    b.HasOne("Database.Shared.Models.Empleado", "Persona")
                        .WithMany("Users")
                        .HasForeignKey("EmpleadoId");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Database.Shared.Models.Banco", b =>
                {
                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Database.Shared.Models.Caja", b =>
                {
                    b.Navigation("DetalleCajas");
                });

            modelBuilder.Entity("Database.Shared.Models.CajaClinica", b =>
                {
                    b.Navigation("DetalleCajaClinicas");
                });

            modelBuilder.Entity("Database.Shared.Models.CajaLab", b =>
                {
                    b.Navigation("DetalleCajaLabs");
                });

            modelBuilder.Entity("Database.Shared.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.CategoriaGasto", b =>
                {
                    b.Navigation("Gastos");
                });

            modelBuilder.Entity("Database.Shared.Models.CategoriaLabClinico", b =>
                {
                    b.Navigation("ExamenLabClinicos");
                });

            modelBuilder.Entity("Database.Shared.Models.Citas", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Database.Shared.Models.Clientes", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Database.Shared.Models.Compra", b =>
                {
                    b.Navigation("DetalleCompras");

                    b.Navigation("Recepciones");
                });

            modelBuilder.Entity("Database.Shared.Models.Cotizacion", b =>
                {
                    b.Navigation("DetalleCotizacion");
                });

            modelBuilder.Entity("Database.Shared.Models.Empleado", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Compras");

                    b.Navigation("Examens");

                    b.Navigation("Users");

                    b.Navigation("Ventas");

                    b.Navigation("VentasServicios");
                });

            modelBuilder.Entity("Database.Shared.Models.Envio", b =>
                {
                    b.Navigation("DetalleEnvios");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Database.Shared.Models.Especialidad", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoExamen", b =>
                {
                    b.Navigation("Examenes");
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoPagoConsulta", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoRecepcion", b =>
                {
                    b.Navigation("Recepciones");
                });

            modelBuilder.Entity("Database.Shared.Models.EstadoTraslados", b =>
                {
                    b.Navigation("TrasladosProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.EstadosEnvio", b =>
                {
                    b.Navigation("Envios");
                });

            modelBuilder.Entity("Database.Shared.Models.Examen", b =>
                {
                    b.Navigation("DetalleExamenes");

                    b.Navigation("VentasLabs");
                });

            modelBuilder.Entity("Database.Shared.Models.ExamenFisico", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Database.Shared.Models.ExamenLabClinico", b =>
                {
                    b.Navigation("DatosExamenesLabClinicos");

                    b.Navigation("DetalleExamens");
                });

            modelBuilder.Entity("Database.Shared.Models.FormaPago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Database.Shared.Models.Grupo", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.GrupoTProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.Historia", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Database.Shared.Models.LaboratorioProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Examens");

                    b.Navigation("Venta");

                    b.Navigation("VentaServicio");
                });

            modelBuilder.Entity("Database.Shared.Models.Prescripcion", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("Database.Shared.Models.PresentacionProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.Producto", b =>
                {
                    b.Navigation("DetalleCotizaciones");

                    b.Navigation("DetalleEnvios");

                    b.Navigation("DetalleTrasladoProductos");

                    b.Navigation("DetalleVentas");

                    b.Navigation("Prescripciones");
                });

            modelBuilder.Entity("Database.Shared.Models.Ruta", b =>
                {
                    b.Navigation("Envios");
                });

            modelBuilder.Entity("Database.Shared.Models.Servicio", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("DetalleCotizaciones");

                    b.Navigation("DetalleServicio");

                    b.Navigation("DetalleVentas");
                });

            modelBuilder.Entity("Database.Shared.Models.Sexo", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("Database.Shared.Models.TipoBodega", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.TipoCompra", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Database.Shared.Models.TipoProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.TrasladosProductos", b =>
                {
                    b.Navigation("DetalleTrasladoProductos");
                });

            modelBuilder.Entity("Database.Shared.Models.Venta", b =>
                {
                    b.Navigation("DetalleCajaClinicas");

                    b.Navigation("DetalleCajas");

                    b.Navigation("DetalleVenta");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Database.Shared.Models.VentaServicio", b =>
                {
                    b.Navigation("DetalleServicio");
                });

            modelBuilder.Entity("Database.Shared.Models.VentasLab", b =>
                {
                    b.Navigation("DetalleCajaLabs");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Database.Shared.Models.Viadmin", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Database.Shared.Models.User", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Envios");

                    b.Navigation("ResponsableApertura");

                    b.Navigation("ResponsableAperturaLab");

                    b.Navigation("ResponsableCierre");

                    b.Navigation("ResponsableCierreLab");

                    b.Navigation("ResponsableEnviados");

                    b.Navigation("ResponsableRecibidos");
                });
#pragma warning restore 612, 618
        }
    }
}
